#define SPICA_API_EXPORT
#include "spectrum.h"

#include <sstream>
#include <iomanip>
#include <algorithm>

namespace spica {

namespace {

static const int    nCIESamples    = 471;
static const double CIE_Y_integral = 106.856895;

struct ColorMatch {
    double nm, x, y, z;
};
    
ColorMatch CIEXYZ_full[] = {
    { 360, 1.29900000e-04, 3.91700000e-06, 6.06100000e-04 },
    { 361, 1.45847000e-04, 4.39358100e-06, 6.80879200e-04 },
    { 362, 1.63802100e-04, 4.92960400e-06, 7.65145600e-04 },
    { 363, 1.84003700e-04, 5.53213600e-06, 8.60012400e-04 },
    { 364, 2.06690200e-04, 6.20824500e-06, 9.66592800e-04 },
    { 365, 2.32100000e-04, 6.96500000e-06, 1.08600000e-03 },
    { 366, 2.60728000e-04, 7.81321900e-06, 1.22058600e-03 },
    { 367, 2.93075000e-04, 8.76733600e-06, 1.37272900e-03 },
    { 368, 3.29388000e-04, 9.83984400e-06, 1.54357900e-03 },
    { 369, 3.69914000e-04, 1.10432300e-05, 1.73428600e-03 },
    { 370, 4.14900000e-04, 1.23900000e-05, 1.94600000e-03 },
    { 371, 4.64158700e-04, 1.38864100e-05, 2.17777700e-03 },
    { 372, 5.18986000e-04, 1.55572800e-05, 2.43580900e-03 },
    { 373, 5.81854000e-04, 1.74429600e-05, 2.73195300e-03 },
    { 374, 6.55234700e-04, 1.95837500e-05, 3.07806400e-03 },
    { 375, 7.41600000e-04, 2.20200000e-05, 3.48600000e-03 },
    { 376, 8.45029600e-04, 2.48396500e-05, 3.97522700e-03 },
    { 377, 9.64526800e-04, 2.80412600e-05, 4.54088000e-03 },
    { 378, 1.09494900e-03, 3.15310400e-05, 5.15832000e-03 },
    { 379, 1.23115400e-03, 3.52152100e-05, 5.80290700e-03 },
    { 380, 1.36800000e-03, 3.90000000e-05, 6.45000100e-03 },
    { 381, 1.50205000e-03, 4.28264000e-05, 7.08321600e-03 },
    { 382, 1.64232800e-03, 4.69146000e-05, 7.74548800e-03 },
    { 383, 1.80238200e-03, 5.15896000e-05, 8.50115200e-03 },
    { 384, 1.99575700e-03, 5.71764000e-05, 9.41454400e-03 },
    { 385, 2.23600000e-03, 6.40000000e-05, 1.05499900e-02 },
    { 386, 2.53538500e-03, 7.23442100e-05, 1.19658000e-02 },
    { 387, 2.89260300e-03, 8.22122400e-05, 1.36558700e-02 },
    { 388, 3.30082900e-03, 9.35081600e-05, 1.55880500e-02 },
    { 389, 3.75323600e-03, 1.06136100e-04, 1.77301500e-02 },
    { 390, 4.24300000e-03, 1.20000000e-04, 2.00500100e-02 },
    { 391, 4.76238900e-03, 1.34984000e-04, 2.25113600e-02 },
    { 392, 5.33004800e-03, 1.51492000e-04, 2.52028800e-02 },
    { 393, 5.97871200e-03, 1.70208000e-04, 2.82797200e-02 },
    { 394, 6.74111700e-03, 1.91816000e-04, 3.18970400e-02 },
    { 395, 7.65000000e-03, 2.17000000e-04, 3.62100000e-02 },
    { 396, 8.75137300e-03, 2.46906700e-04, 4.14377100e-02 },
    { 397, 1.00288800e-02, 2.81240000e-04, 4.75037200e-02 },
    { 398, 1.14217000e-02, 3.18520000e-04, 5.41198800e-02 },
    { 399, 1.28690100e-02, 3.57266700e-04, 6.09980300e-02 },
    { 400, 1.43100000e-02, 3.96000000e-04, 6.78500100e-02 },
    { 401, 1.57044300e-02, 4.33714700e-04, 7.44863200e-02 },
    { 402, 1.71474400e-02, 4.73024000e-04, 8.13615600e-02 },
    { 403, 1.87812200e-02, 5.17876000e-04, 8.91536400e-02 },
    { 404, 2.07480100e-02, 5.72218700e-04, 9.85404800e-02 },
    { 405, 2.31900000e-02, 6.40000000e-04, 1.10200000e-01 },
    { 406, 2.62073600e-02, 7.24560000e-04, 1.24613300e-01 },
    { 407, 2.97824800e-02, 8.25500000e-04, 1.41701700e-01 },
    { 408, 3.38809200e-02, 9.41160000e-04, 1.61303500e-01 },
    { 409, 3.84682400e-02, 1.06988000e-03, 1.83256800e-01 },
    { 410, 4.35100000e-02, 1.21000000e-03, 2.07400000e-01 },
    { 411, 4.89956000e-02, 1.36209100e-03, 2.33692100e-01 },
    { 412, 5.50226000e-02, 1.53075200e-03, 2.62611400e-01 },
    { 413, 6.17188000e-02, 1.72036800e-03, 2.94774600e-01 },
    { 414, 6.92120000e-02, 1.93532300e-03, 3.30798500e-01 },
    { 415, 7.76300000e-02, 2.18000000e-03, 3.71300000e-01 },
    { 416, 8.69581100e-02, 2.45480000e-03, 4.16209100e-01 },
    { 417, 9.71767200e-02, 2.76400000e-03, 4.65464200e-01 },
    { 418, 1.08406300e-01, 3.11780000e-03, 5.19694800e-01 },
    { 419, 1.20767200e-01, 3.52640000e-03, 5.79530300e-01 },
    { 420, 1.34380000e-01, 4.00000000e-03, 6.45600000e-01 },
    { 421, 1.49358200e-01, 4.54624000e-03, 7.18483800e-01 },
    { 422, 1.65395700e-01, 5.15932000e-03, 7.96713300e-01 },
    { 423, 1.81983100e-01, 5.82928000e-03, 8.77845900e-01 },
    { 424, 1.98611000e-01, 6.54616000e-03, 9.59439000e-01 },
    { 425, 2.14770000e-01, 7.30000000e-03, 1.03905010e+00 },
    { 426, 2.30186800e-01, 8.08650700e-03, 1.11536730e+00 },
    { 427, 2.44879700e-01, 8.90872000e-03, 1.18849710e+00 },
    { 428, 2.58777300e-01, 9.76768000e-03, 1.25812330e+00 },
    { 429, 2.71807900e-01, 1.06644300e-02, 1.32392960e+00 },
    { 430, 2.83900000e-01, 1.16000000e-02, 1.38560000e+00 },
    { 431, 2.94943800e-01, 1.25731700e-02, 1.44263520e+00 },
    { 432, 3.04896500e-01, 1.35827200e-02, 1.49480350e+00 },
    { 433, 3.13787300e-01, 1.46296800e-02, 1.54219030e+00 },
    { 434, 3.21645400e-01, 1.57150900e-02, 1.58488070e+00 },
    { 435, 3.28500000e-01, 1.68400000e-02, 1.62296000e+00 },
    { 436, 3.34351300e-01, 1.80073600e-02, 1.65640480e+00 },
    { 437, 3.39210100e-01, 1.92144800e-02, 1.68529590e+00 },
    { 438, 3.43121300e-01, 2.04539200e-02, 1.70987450e+00 },
    { 439, 3.46129600e-01, 2.17182400e-02, 1.73038210e+00 },
    { 440, 3.48280000e-01, 2.30000000e-02, 1.74706000e+00 },
    { 441, 3.49599900e-01, 2.42946100e-02, 1.76004460e+00 },
    { 442, 3.50147400e-01, 2.56102400e-02, 1.76962330e+00 },
    { 443, 3.50013000e-01, 2.69585700e-02, 1.77626370e+00 },
    { 444, 3.49287000e-01, 2.83512500e-02, 1.78043340e+00 },
    { 445, 3.48060000e-01, 2.98000000e-02, 1.78260000e+00 },
    { 446, 3.46373300e-01, 3.13108300e-02, 1.78296820e+00 },
    { 447, 3.44262400e-01, 3.28836800e-02, 1.78169980e+00 },
    { 448, 3.41808800e-01, 3.45211200e-02, 1.77919820e+00 },
    { 449, 3.39094100e-01, 3.62257100e-02, 1.77586710e+00 },
    { 450, 3.36200000e-01, 3.80000000e-02, 1.77211000e+00 },
    { 451, 3.33197700e-01, 3.98466700e-02, 1.76825890e+00 },
    { 452, 3.30041100e-01, 4.17680000e-02, 1.76403900e+00 },
    { 453, 3.26635700e-01, 4.37660000e-02, 1.75894380e+00 },
    { 454, 3.22886800e-01, 4.58426700e-02, 1.75246630e+00 },
    { 455, 3.18700000e-01, 4.80000000e-02, 1.74410000e+00 },
    { 456, 3.14025100e-01, 5.02436800e-02, 1.73355950e+00 },
    { 457, 3.08884000e-01, 5.25730400e-02, 1.72085810e+00 },
    { 458, 3.03290400e-01, 5.49805600e-02, 1.70593690e+00 },
    { 459, 2.97257900e-01, 5.74587200e-02, 1.68873720e+00 },
    { 460, 2.90800000e-01, 6.00000000e-02, 1.66920000e+00 },
    { 461, 2.83970100e-01, 6.26019700e-02, 1.64752870e+00 },
    { 462, 2.76721400e-01, 6.52775200e-02, 1.62341270e+00 },
    { 463, 2.68917800e-01, 6.80420800e-02, 1.59602230e+00 },
    { 464, 2.60422700e-01, 7.09110900e-02, 1.56452800e+00 },
    { 465, 2.51100000e-01, 7.39000000e-02, 1.52810000e+00 },
    { 466, 2.40847500e-01, 7.70160000e-02, 1.48611140e+00 },
    { 467, 2.29851200e-01, 8.02664000e-02, 1.43952150e+00 },
    { 468, 2.18407200e-01, 8.36668000e-02, 1.38987990e+00 },
    { 469, 2.06811500e-01, 8.72328000e-02, 1.33873620e+00 },
    { 470, 1.95360000e-01, 9.09800000e-02, 1.28764000e+00 },
    { 471, 1.84213600e-01, 9.49175500e-02, 1.23742230e+00 },
    { 472, 1.73327300e-01, 9.90458400e-02, 1.18782430e+00 },
    { 473, 1.62688100e-01, 1.03367400e-01, 1.13876110e+00 },
    { 474, 1.52283300e-01, 1.07884600e-01, 1.09014800e+00 },
    { 475, 1.42100000e-01, 1.12600000e-01, 1.04190000e+00 },
    { 476, 1.32178600e-01, 1.17532000e-01, 9.94197600e-01 },
    { 477, 1.22569600e-01, 1.22674400e-01, 9.47347300e-01 },
    { 478, 1.13275200e-01, 1.27992800e-01, 9.01453100e-01 },
    { 479, 1.04297900e-01, 1.33452800e-01, 8.56619300e-01 },
    { 480, 9.56400000e-02, 1.39020000e-01, 8.12950100e-01 },
    { 481, 8.72995500e-02, 1.44676400e-01, 7.70517300e-01 },
    { 482, 7.93080400e-02, 1.50469300e-01, 7.29444800e-01 },
    { 483, 7.17177600e-02, 1.56461900e-01, 6.89913600e-01 },
    { 484, 6.45809900e-02, 1.62717700e-01, 6.52104900e-01 },
    { 485, 5.79500100e-02, 1.69300000e-01, 6.16200000e-01 },
    { 486, 5.18621100e-02, 1.76243100e-01, 5.82328600e-01 },
    { 487, 4.62815200e-02, 1.83558100e-01, 5.50416200e-01 },
    { 488, 4.11508800e-02, 1.91273500e-01, 5.20337600e-01 },
    { 489, 3.64128300e-02, 1.99418000e-01, 4.91967300e-01 },
    { 490, 3.20100000e-02, 2.08020000e-01, 4.65180000e-01 },
    { 491, 2.79172000e-02, 2.17119900e-01, 4.39924600e-01 },
    { 492, 2.41444000e-02, 2.26734500e-01, 4.16183600e-01 },
    { 493, 2.06870000e-02, 2.36857100e-01, 3.93882200e-01 },
    { 494, 1.75404000e-02, 2.47481200e-01, 3.72945900e-01 },
    { 495, 1.47000000e-02, 2.58600000e-01, 3.53300000e-01 },
    { 496, 1.21617900e-02, 2.70184900e-01, 3.34857800e-01 },
    { 497, 9.91996000e-03, 2.82293900e-01, 3.17552100e-01 },
    { 498, 7.96724000e-03, 2.95050500e-01, 3.01337500e-01 },
    { 499, 6.29634600e-03, 3.08578000e-01, 2.86168600e-01 },
    { 500, 4.90000000e-03, 3.23000000e-01, 2.72000000e-01 },
    { 501, 3.77717300e-03, 3.38402100e-01, 2.58817100e-01 },
    { 502, 2.94532000e-03, 3.54685800e-01, 2.46483800e-01 },
    { 503, 2.42488000e-03, 3.71698600e-01, 2.34771800e-01 },
    { 504, 2.23629300e-03, 3.89287500e-01, 2.23453300e-01 },
    { 505, 2.40000000e-03, 4.07300000e-01, 2.12300000e-01 },
    { 506, 2.92552000e-03, 4.25629900e-01, 2.01169200e-01 },
    { 507, 3.83656000e-03, 4.44309600e-01, 1.90119600e-01 },
    { 508, 5.17484000e-03, 4.63394400e-01, 1.79225400e-01 },
    { 509, 6.98208000e-03, 4.82939500e-01, 1.68560800e-01 },
    { 510, 9.30000000e-03, 5.03000000e-01, 1.58200000e-01 },
    { 511, 1.21494900e-02, 5.23569300e-01, 1.48138300e-01 },
    { 512, 1.55358800e-02, 5.44512000e-01, 1.38375800e-01 },
    { 513, 1.94775200e-02, 5.65690000e-01, 1.28994200e-01 },
    { 514, 2.39927700e-02, 5.86965300e-01, 1.20075100e-01 },
    { 515, 2.91000000e-02, 6.08200000e-01, 1.11700000e-01 },
    { 516, 3.48148500e-02, 6.29345600e-01, 1.03904800e-01 },
    { 517, 4.11201600e-02, 6.50306800e-01, 9.66674800e-02 },
    { 518, 4.79850400e-02, 6.70875200e-01, 8.99827200e-02 },
    { 519, 5.53786100e-02, 6.90842400e-01, 8.38453100e-02 },
    { 520, 6.32700000e-02, 7.10000000e-01, 7.82499900e-02 },
    { 521, 7.16350100e-02, 7.28185200e-01, 7.32089900e-02 },
    { 522, 8.04622400e-02, 7.45463600e-01, 6.86781600e-02 },
    { 523, 8.97399600e-02, 7.61969400e-01, 6.45678400e-02 },
    { 524, 9.94564500e-02, 7.77836800e-01, 6.07883500e-02 },
    { 525, 1.09600000e-01, 7.93200000e-01, 5.72500100e-02 },
    { 526, 1.20167400e-01, 8.08110400e-01, 5.39043500e-02 },
    { 527, 1.31114500e-01, 8.22496200e-01, 5.07466400e-02 },
    { 528, 1.42367900e-01, 8.36306800e-01, 4.77527600e-02 },
    { 529, 1.53854200e-01, 8.49491600e-01, 4.48985900e-02 },
    { 530, 1.65500000e-01, 8.62000000e-01, 4.21600000e-02 },
    { 531, 1.77257100e-01, 8.73810800e-01, 3.95072800e-02 },
    { 532, 1.89140000e-01, 8.84962400e-01, 3.69356400e-02 },
    { 533, 2.01169400e-01, 8.95493600e-01, 3.44583600e-02 },
    { 534, 2.13365800e-01, 9.05443200e-01, 3.20887200e-02 },
    { 535, 2.25749900e-01, 9.14850100e-01, 2.98400000e-02 },
    { 536, 2.38320900e-01, 9.23734800e-01, 2.77118100e-02 },
    { 537, 2.51066800e-01, 9.32092400e-01, 2.56944400e-02 },
    { 538, 2.63992200e-01, 9.39922600e-01, 2.37871600e-02 },
    { 539, 2.77101700e-01, 9.47225200e-01, 2.19892500e-02 },
    { 540, 2.90400000e-01, 9.54000000e-01, 2.03000000e-02 },
    { 541, 3.03891200e-01, 9.60256100e-01, 1.87180500e-02 },
    { 542, 3.17572600e-01, 9.66007400e-01, 1.72403600e-02 },
    { 543, 3.31438400e-01, 9.71260600e-01, 1.58636400e-02 },
    { 544, 3.45482800e-01, 9.76022500e-01, 1.45846100e-02 },
    { 545, 3.59700000e-01, 9.80300000e-01, 1.34000000e-02 },
    { 546, 3.74083900e-01, 9.84092400e-01, 1.23072300e-02 },
    { 547, 3.88639600e-01, 9.87418200e-01, 1.13018800e-02 },
    { 548, 4.03378400e-01, 9.90312800e-01, 1.03779200e-02 },
    { 549, 4.18311500e-01, 9.92811600e-01, 9.52930600e-03 },
    { 550, 4.33449900e-01, 9.94950100e-01, 8.74999900e-03 },
    { 551, 4.48795300e-01, 9.96710800e-01, 8.03520000e-03 },
    { 552, 4.64336000e-01, 9.98098300e-01, 7.38160000e-03 },
    { 553, 4.80064000e-01, 9.99112000e-01, 6.78540000e-03 },
    { 554, 4.95971300e-01, 9.99748200e-01, 6.24280000e-03 },
    { 555, 5.12050100e-01, 1.00000000e+00, 5.74999900e-03 },
    { 556, 5.28295900e-01, 9.99856700e-01, 5.30360000e-03 },
    { 557, 5.44691600e-01, 9.99304600e-01, 4.89980000e-03 },
    { 558, 5.61209400e-01, 9.98325500e-01, 4.53420000e-03 },
    { 559, 5.77821500e-01, 9.96898700e-01, 4.20240000e-03 },
    { 560, 5.94500000e-01, 9.95000000e-01, 3.90000000e-03 },
    { 561, 6.11220900e-01, 9.92600500e-01, 3.62320000e-03 },
    { 562, 6.27975800e-01, 9.89742600e-01, 3.37060000e-03 },
    { 563, 6.44760200e-01, 9.86444400e-01, 3.14140000e-03 },
    { 564, 6.61569700e-01, 9.82724100e-01, 2.93480000e-03 },
    { 565, 6.78400000e-01, 9.78600000e-01, 2.74999900e-03 },
    { 566, 6.95239200e-01, 9.74083700e-01, 2.58520000e-03 },
    { 567, 7.12058600e-01, 9.69171200e-01, 2.43860000e-03 },
    { 568, 7.28828400e-01, 9.63856800e-01, 2.30940000e-03 },
    { 569, 7.45518800e-01, 9.58134900e-01, 2.19680000e-03 },
    { 570, 7.62100000e-01, 9.52000000e-01, 2.10000000e-03 },
    { 571, 7.78543200e-01, 9.45450400e-01, 2.01773300e-03 },
    { 572, 7.94825600e-01, 9.38499200e-01, 1.94820000e-03 },
    { 573, 8.10926400e-01, 9.31162800e-01, 1.88980000e-03 },
    { 574, 8.26824800e-01, 9.23457600e-01, 1.84093300e-03 },
    { 575, 8.42500000e-01, 9.15400000e-01, 1.80000000e-03 },
    { 576, 8.57932500e-01, 9.07006400e-01, 1.76626700e-03 },
    { 577, 8.73081600e-01, 8.98277200e-01, 1.73780000e-03 },
    { 578, 8.87894400e-01, 8.89204800e-01, 1.71120000e-03 },
    { 579, 9.02318100e-01, 8.79781600e-01, 1.68306700e-03 },
    { 580, 9.16300000e-01, 8.70000000e-01, 1.65000100e-03 },
    { 581, 9.29799500e-01, 8.59861300e-01, 1.61013300e-03 },
    { 582, 9.42798400e-01, 8.49392000e-01, 1.56440000e-03 },
    { 583, 9.55277600e-01, 8.38622000e-01, 1.51360000e-03 },
    { 584, 9.67217900e-01, 8.27581300e-01, 1.45853300e-03 },
    { 585, 9.78600000e-01, 8.16300000e-01, 1.40000000e-03 },
    { 586, 9.89385600e-01, 8.04794700e-01, 1.33666700e-03 },
    { 587, 9.99548800e-01, 7.93082000e-01, 1.27000000e-03 },
    { 588, 1.00908920e+00, 7.81192000e-01, 1.20500000e-03 },
    { 589, 1.01800640e+00, 7.69154700e-01, 1.14666700e-03 },
    { 590, 1.02630000e+00, 7.57000000e-01, 1.10000000e-03 },
    { 591, 1.03398270e+00, 7.44754100e-01, 1.06880000e-03 },
    { 592, 1.04098600e+00, 7.32422400e-01, 1.04940000e-03 },
    { 593, 1.04718800e+00, 7.20003600e-01, 1.03560000e-03 },
    { 594, 1.05246670e+00, 7.07496500e-01, 1.02120000e-03 },
    { 595, 1.05670000e+00, 6.94900000e-01, 1.00000000e-03 },
    { 596, 1.05979440e+00, 6.82219200e-01, 9.68640000e-04 },
    { 597, 1.06179920e+00, 6.69471600e-01, 9.29920000e-04 },
    { 598, 1.06280680e+00, 6.56674400e-01, 8.86880000e-04 },
    { 599, 1.06290960e+00, 6.43844800e-01, 8.42560000e-04 },
    { 600, 1.06220000e+00, 6.31000000e-01, 8.00000000e-04 },
    { 601, 1.06073520e+00, 6.18155500e-01, 7.60960000e-04 },
    { 602, 1.05844360e+00, 6.05314400e-01, 7.23680000e-04 },
    { 603, 1.05522440e+00, 5.92475600e-01, 6.85920000e-04 },
    { 604, 1.05097680e+00, 5.79637900e-01, 6.45440000e-04 },
    { 605, 1.04560000e+00, 5.66800000e-01, 6.00000000e-04 },
    { 606, 1.03903690e+00, 5.53961100e-01, 5.47866700e-04 },
    { 607, 1.03136080e+00, 5.41137200e-01, 4.91600000e-04 },
    { 608, 1.02266620e+00, 5.28352800e-01, 4.35400000e-04 },
    { 609, 1.01304770e+00, 5.15632300e-01, 3.83466700e-04 },
    { 610, 1.00260000e+00, 5.03000000e-01, 3.40000000e-04 },
    { 611, 9.91367500e-01, 4.90468800e-01, 3.07253300e-04 },
    { 612, 9.79331400e-01, 4.78030400e-01, 2.83160000e-04 },
    { 613, 9.66491600e-01, 4.65677600e-01, 2.65440000e-04 },
    { 614, 9.52847900e-01, 4.53403200e-01, 2.51813300e-04 },
    { 615, 9.38400000e-01, 4.41200000e-01, 2.40000000e-04 },
    { 616, 9.23194000e-01, 4.29080000e-01, 2.29546700e-04 },
    { 617, 9.07244000e-01, 4.17036000e-01, 2.20640000e-04 },
    { 618, 8.90502000e-01, 4.05032000e-01, 2.11960000e-04 },
    { 619, 8.72920000e-01, 3.93032000e-01, 2.02186700e-04 },
    { 620, 8.54449900e-01, 3.81000000e-01, 1.90000000e-04 },
    { 621, 8.35084000e-01, 3.68918400e-01, 1.74213300e-04 },
    { 622, 8.14946000e-01, 3.56827200e-01, 1.55640000e-04 },
    { 623, 7.94186000e-01, 3.44776800e-01, 1.35960000e-04 },
    { 624, 7.72954000e-01, 3.32817600e-01, 1.16853300e-04 },
    { 625, 7.51400000e-01, 3.21000000e-01, 1.00000000e-04 },
    { 626, 7.29583600e-01, 3.09338100e-01, 8.61333300e-05 },
    { 627, 7.07588800e-01, 2.97850400e-01, 7.46000000e-05 },
    { 628, 6.85602200e-01, 2.86593600e-01, 6.50000000e-05 },
    { 629, 6.63810400e-01, 2.75624500e-01, 5.69333300e-05 },
    { 630, 6.42400000e-01, 2.65000000e-01, 4.99999900e-05 },
    { 631, 6.21514900e-01, 2.54763200e-01, 4.41600000e-05 },
    { 632, 6.01113800e-01, 2.44889600e-01, 3.94800000e-05 },
    { 633, 5.81105200e-01, 2.35334400e-01, 3.57200000e-05 },
    { 634, 5.61397700e-01, 2.26052800e-01, 3.26400000e-05 },
    { 635, 5.41900000e-01, 2.17000000e-01, 3.00000000e-05 },
    { 636, 5.22599500e-01, 2.08161600e-01, 2.76533300e-05 },
    { 637, 5.03546400e-01, 1.99548800e-01, 2.55600000e-05 },
    { 638, 4.84743600e-01, 1.91155200e-01, 2.36400000e-05 },
    { 639, 4.66193900e-01, 1.82974400e-01, 2.18133300e-05 },
    { 640, 4.47900000e-01, 1.75000000e-01, 2.00000000e-05 },
    { 641, 4.29861300e-01, 1.67223500e-01, 1.81333300e-05 },
    { 642, 4.12098000e-01, 1.59646400e-01, 1.62000000e-05 },
    { 643, 3.94644000e-01, 1.52277600e-01, 1.42000000e-05 },
    { 644, 3.77533300e-01, 1.45125900e-01, 1.21333300e-05 },
    { 645, 3.60800000e-01, 1.38200000e-01, 1.00000000e-05 },
    { 646, 3.44456300e-01, 1.31500300e-01, 7.73333300e-06 },
    { 647, 3.28516800e-01, 1.25024800e-01, 5.40000000e-06 },
    { 648, 3.13019200e-01, 1.18779200e-01, 3.20000000e-06 },
    { 649, 2.98001100e-01, 1.12769100e-01, 1.33333300e-06 },
    { 650, 2.83500000e-01, 1.07000000e-01, 0.00000000e+00 },
    { 651, 2.69544800e-01, 1.01476200e-01, 0.00000000e+00 },
    { 652, 2.56118400e-01, 9.61886400e-02, 0.00000000e+00 },
    { 653, 2.43189600e-01, 9.11229600e-02, 0.00000000e+00 },
    { 654, 2.30727200e-01, 8.62648500e-02, 0.00000000e+00 },
    { 655, 2.18700000e-01, 8.16000000e-02, 0.00000000e+00 },
    { 656, 2.07097100e-01, 7.71206400e-02, 0.00000000e+00 },
    { 657, 1.95923200e-01, 7.28255200e-02, 0.00000000e+00 },
    { 658, 1.85170800e-01, 6.87100800e-02, 0.00000000e+00 },
    { 659, 1.74832300e-01, 6.47697600e-02, 0.00000000e+00 },
    { 660, 1.64900000e-01, 6.10000000e-02, 0.00000000e+00 },
    { 661, 1.55366700e-01, 5.73962100e-02, 0.00000000e+00 },
    { 662, 1.46230000e-01, 5.39550400e-02, 0.00000000e+00 },
    { 663, 1.37490000e-01, 5.06737600e-02, 0.00000000e+00 },
    { 664, 1.29146700e-01, 4.75496500e-02, 0.00000000e+00 },
    { 665, 1.21200000e-01, 4.45800000e-02, 0.00000000e+00 },
    { 666, 1.13639700e-01, 4.17587200e-02, 0.00000000e+00 },
    { 667, 1.06465000e-01, 3.90849600e-02, 0.00000000e+00 },
    { 668, 9.96904400e-02, 3.65638400e-02, 0.00000000e+00 },
    { 669, 9.33306100e-02, 3.42004800e-02, 0.00000000e+00 },
    { 670, 8.74000000e-02, 3.20000000e-02, 0.00000000e+00 },
    { 671, 8.19009600e-02, 2.99626100e-02, 0.00000000e+00 },
    { 672, 7.68042800e-02, 2.80766400e-02, 0.00000000e+00 },
    { 673, 7.20771200e-02, 2.63293600e-02, 0.00000000e+00 },
    { 674, 6.76866400e-02, 2.47080500e-02, 0.00000000e+00 },
    { 675, 6.36000000e-02, 2.32000000e-02, 0.00000000e+00 },
    { 676, 5.98068500e-02, 2.18007700e-02, 0.00000000e+00 },
    { 677, 5.62821600e-02, 2.05011200e-02, 0.00000000e+00 },
    { 678, 5.29710400e-02, 1.92810800e-02, 0.00000000e+00 },
    { 679, 4.98186100e-02, 1.81206900e-02, 0.00000000e+00 },
    { 680, 4.67700000e-02, 1.70000000e-02, 0.00000000e+00 },
    { 681, 4.37840500e-02, 1.59037900e-02, 0.00000000e+00 },
    { 682, 4.08753600e-02, 1.48371800e-02, 0.00000000e+00 },
    { 683, 3.80726400e-02, 1.38106800e-02, 0.00000000e+00 },
    { 684, 3.54046100e-02, 1.28347800e-02, 0.00000000e+00 },
    { 685, 3.29000000e-02, 1.19200000e-02, 0.00000000e+00 },
    { 686, 3.05641900e-02, 1.10683100e-02, 0.00000000e+00 },
    { 687, 2.83805600e-02, 1.02733900e-02, 0.00000000e+00 },
    { 688, 2.63448400e-02, 9.53331100e-03, 0.00000000e+00 },
    { 689, 2.44527500e-02, 8.84615700e-03, 0.00000000e+00 },
    { 690, 2.27000000e-02, 8.21000000e-03, 0.00000000e+00 },
    { 691, 2.10842900e-02, 7.62378100e-03, 0.00000000e+00 },
    { 692, 1.95998800e-02, 7.08542400e-03, 0.00000000e+00 },
    { 693, 1.82373200e-02, 6.59147600e-03, 0.00000000e+00 },
    { 694, 1.69871700e-02, 6.13848500e-03, 0.00000000e+00 },
    { 695, 1.58400000e-02, 5.72300000e-03, 0.00000000e+00 },
    { 696, 1.47906400e-02, 5.34305900e-03, 0.00000000e+00 },
    { 697, 1.38313200e-02, 4.99579600e-03, 0.00000000e+00 },
    { 698, 1.29486800e-02, 4.67640400e-03, 0.00000000e+00 },
    { 699, 1.21292000e-02, 4.38007500e-03, 0.00000000e+00 },
    { 700, 1.13591600e-02, 4.10200000e-03, 0.00000000e+00 },
    { 701, 1.06293500e-02, 3.83845300e-03, 0.00000000e+00 },
    { 702, 9.93884600e-03, 3.58909900e-03, 0.00000000e+00 },
    { 703, 9.28842200e-03, 3.35421900e-03, 0.00000000e+00 },
    { 704, 8.67885400e-03, 3.13409300e-03, 0.00000000e+00 },
    { 705, 8.11091600e-03, 2.92900000e-03, 0.00000000e+00 },
    { 706, 7.58238800e-03, 2.73813900e-03, 0.00000000e+00 },
    { 707, 7.08874600e-03, 2.55987600e-03, 0.00000000e+00 },
    { 708, 6.62731300e-03, 2.39324400e-03, 0.00000000e+00 },
    { 709, 6.19540800e-03, 2.23727500e-03, 0.00000000e+00 },
    { 710, 5.79034600e-03, 2.09100000e-03, 0.00000000e+00 },
    { 711, 5.40982600e-03, 1.95358700e-03, 0.00000000e+00 },
    { 712, 5.05258300e-03, 1.82458000e-03, 0.00000000e+00 },
    { 713, 4.71751200e-03, 1.70358000e-03, 0.00000000e+00 },
    { 714, 4.40350700e-03, 1.59018700e-03, 0.00000000e+00 },
    { 715, 4.10945700e-03, 1.48400000e-03, 0.00000000e+00 },
    { 716, 3.83391300e-03, 1.38449600e-03, 0.00000000e+00 },
    { 717, 3.57574800e-03, 1.29126800e-03, 0.00000000e+00 },
    { 718, 3.33434200e-03, 1.20409200e-03, 0.00000000e+00 },
    { 719, 3.10907500e-03, 1.12274400e-03, 0.00000000e+00 },
    { 720, 2.89932700e-03, 1.04700000e-03, 0.00000000e+00 },
    { 721, 2.70434800e-03, 9.76589600e-04, 0.00000000e+00 },
    { 722, 2.52302000e-03, 9.11108800e-04, 0.00000000e+00 },
    { 723, 2.35416800e-03, 8.50133200e-04, 0.00000000e+00 },
    { 724, 2.19661600e-03, 7.93238400e-04, 0.00000000e+00 },
    { 725, 2.04919000e-03, 7.40000000e-04, 0.00000000e+00 },
    { 726, 1.91096000e-03, 6.90082700e-04, 0.00000000e+00 },
    { 727, 1.78143800e-03, 6.43310000e-04, 0.00000000e+00 },
    { 728, 1.66011000e-03, 5.99496000e-04, 0.00000000e+00 },
    { 729, 1.54645900e-03, 5.58454700e-04, 0.00000000e+00 },
    { 730, 1.43997100e-03, 5.20000000e-04, 0.00000000e+00 },
    { 731, 1.34004200e-03, 4.83913600e-04, 0.00000000e+00 },
    { 732, 1.24627500e-03, 4.50052800e-04, 0.00000000e+00 },
    { 733, 1.15847100e-03, 4.18345200e-04, 0.00000000e+00 },
    { 734, 1.07643000e-03, 3.88718400e-04, 0.00000000e+00 },
    { 735, 9.99949300e-04, 3.61100000e-04, 0.00000000e+00 },
    { 736, 9.28735800e-04, 3.35383500e-04, 0.00000000e+00 },
    { 737, 8.62433200e-04, 3.11440400e-04, 0.00000000e+00 },
    { 738, 8.00750300e-04, 2.89165600e-04, 0.00000000e+00 },
    { 739, 7.43396000e-04, 2.68453900e-04, 0.00000000e+00 },
    { 740, 6.90078600e-04, 2.49200000e-04, 0.00000000e+00 },
    { 741, 6.40515600e-04, 2.31301900e-04, 0.00000000e+00 },
    { 742, 5.94502100e-04, 2.14685600e-04, 0.00000000e+00 },
    { 743, 5.51864600e-04, 1.99288400e-04, 0.00000000e+00 },
    { 744, 5.12429000e-04, 1.85047500e-04, 0.00000000e+00 },
    { 745, 4.76021300e-04, 1.71900000e-04, 0.00000000e+00 },
    { 746, 4.42453600e-04, 1.59778100e-04, 0.00000000e+00 },
    { 747, 4.11511700e-04, 1.48604400e-04, 0.00000000e+00 },
    { 748, 3.82981400e-04, 1.38301600e-04, 0.00000000e+00 },
    { 749, 3.56649100e-04, 1.28792500e-04, 0.00000000e+00 },
    { 750, 3.32301100e-04, 1.20000000e-04, 0.00000000e+00 },
    { 751, 3.09758600e-04, 1.11859500e-04, 0.00000000e+00 },
    { 752, 2.88887100e-04, 1.04322400e-04, 0.00000000e+00 },
    { 753, 2.69539400e-04, 9.73356000e-05, 0.00000000e+00 },
    { 754, 2.51568200e-04, 9.08458700e-05, 0.00000000e+00 },
    { 755, 2.34826100e-04, 8.48000000e-05, 0.00000000e+00 },
    { 756, 2.19171000e-04, 7.91466700e-05, 0.00000000e+00 },
    { 757, 2.04525800e-04, 7.38580000e-05, 0.00000000e+00 },
    { 758, 1.90840500e-04, 6.89160000e-05, 0.00000000e+00 },
    { 759, 1.78065400e-04, 6.43026700e-05, 0.00000000e+00 },
    { 760, 1.66150500e-04, 6.00000000e-05, 0.00000000e+00 },
    { 761, 1.55023600e-04, 5.59818700e-05, 0.00000000e+00 },
    { 762, 1.44621900e-04, 5.22256000e-05, 0.00000000e+00 },
    { 763, 1.34909800e-04, 4.87184000e-05, 0.00000000e+00 },
    { 764, 1.25852000e-04, 4.54474700e-05, 0.00000000e+00 },
    { 765, 1.17413000e-04, 4.24000000e-05, 0.00000000e+00 },
    { 766, 1.09551500e-04, 3.95610400e-05, 0.00000000e+00 },
    { 767, 1.02224500e-04, 3.69151200e-05, 0.00000000e+00 },
    { 768, 9.53944500e-05, 3.44486800e-05, 0.00000000e+00 },
    { 769, 8.90239000e-05, 3.21481600e-05, 0.00000000e+00 },
    { 770, 8.30752700e-05, 3.00000000e-05, 0.00000000e+00 },
    { 771, 7.75126900e-05, 2.79912500e-05, 0.00000000e+00 },
    { 772, 7.23130400e-05, 2.61135600e-05, 0.00000000e+00 },
    { 773, 6.74577800e-05, 2.43602400e-05, 0.00000000e+00 },
    { 774, 6.29284400e-05, 2.27246100e-05, 0.00000000e+00 },
    { 775, 5.87065200e-05, 2.12000000e-05, 0.00000000e+00 },
    { 776, 5.47702800e-05, 1.97785500e-05, 0.00000000e+00 },
    { 777, 5.10991800e-05, 1.84528500e-05, 0.00000000e+00 },
    { 778, 4.76765400e-05, 1.72168700e-05, 0.00000000e+00 },
    { 779, 4.44856700e-05, 1.60645900e-05, 0.00000000e+00 },
    { 780, 4.15099400e-05, 1.49900000e-05, 0.00000000e+00 },
    { 781, 3.87332400e-05, 1.39872800e-05, 0.00000000e+00 },
    { 782, 3.61420300e-05, 1.30515500e-05, 0.00000000e+00 },
    { 783, 3.37235200e-05, 1.21781800e-05, 0.00000000e+00 },
    { 784, 3.14648700e-05, 1.13625400e-05, 0.00000000e+00 },
    { 785, 2.93532600e-05, 1.06000000e-05, 0.00000000e+00 },
    { 786, 2.73757300e-05, 9.88587700e-06, 0.00000000e+00 },
    { 787, 2.55243300e-05, 9.21730400e-06, 0.00000000e+00 },
    { 788, 2.37937600e-05, 8.59236200e-06, 0.00000000e+00 },
    { 789, 2.21787000e-05, 8.00913300e-06, 0.00000000e+00 },
    { 790, 2.06738300e-05, 7.46570000e-06, 0.00000000e+00 },
    { 791, 1.92722600e-05, 6.95956700e-06, 0.00000000e+00 },
    { 792, 1.79664000e-05, 6.48799500e-06, 0.00000000e+00 },
    { 793, 1.67499100e-05, 6.04869900e-06, 0.00000000e+00 },
    { 794, 1.56164800e-05, 5.63939600e-06, 0.00000000e+00 },
    { 795, 1.45597700e-05, 5.25780000e-06, 0.00000000e+00 },
    { 796, 1.35738700e-05, 4.90177100e-06, 0.00000000e+00 },
    { 797, 1.26543600e-05, 4.56972000e-06, 0.00000000e+00 },
    { 798, 1.17972300e-05, 4.26019400e-06, 0.00000000e+00 },
    { 799, 1.09984400e-05, 3.97173900e-06, 0.00000000e+00 },
    { 800, 1.02539800e-05, 3.70290000e-06, 0.00000000e+00 },
    { 801, 9.55964600e-06, 3.45216300e-06, 0.00000000e+00 },
    { 802, 8.91204400e-06, 3.21830200e-06, 0.00000000e+00 },
    { 803, 8.30835800e-06, 3.00030000e-06, 0.00000000e+00 },
    { 804, 7.74576900e-06, 2.79713900e-06, 0.00000000e+00 },
    { 805, 7.22145600e-06, 2.60780000e-06, 0.00000000e+00 },
    { 806, 6.73247500e-06, 2.43122000e-06, 0.00000000e+00 },
    { 807, 6.27642300e-06, 2.26653100e-06, 0.00000000e+00 },
    { 808, 5.85130400e-06, 2.11301300e-06, 0.00000000e+00 },
    { 809, 5.45511800e-06, 1.96994300e-06, 0.00000000e+00 },
    { 810, 5.08586800e-06, 1.83660000e-06, 0.00000000e+00 },
    { 811, 4.74146600e-06, 1.71223000e-06, 0.00000000e+00 },
    { 812, 4.42023600e-06, 1.59622800e-06, 0.00000000e+00 },
    { 813, 4.12078300e-06, 1.48809000e-06, 0.00000000e+00 },
    { 814, 3.84171600e-06, 1.38731400e-06, 0.00000000e+00 },
    { 815, 3.58165200e-06, 1.29340000e-06, 0.00000000e+00 },
    { 816, 3.33912700e-06, 1.20582000e-06, 0.00000000e+00 },
    { 817, 3.11294900e-06, 1.12414300e-06, 0.00000000e+00 },
    { 818, 2.90212100e-06, 1.04800900e-06, 0.00000000e+00 },
    { 819, 2.70564500e-06, 9.77058000e-07, 0.00000000e+00 },
    { 820, 2.52252500e-06, 9.10930000e-07, 0.00000000e+00 },
    { 821, 2.35172600e-06, 8.49251000e-07, 0.00000000e+00 },
    { 822, 2.19241500e-06, 7.91721000e-07, 0.00000000e+00 },
    { 823, 2.04390200e-06, 7.38090000e-07, 0.00000000e+00 },
    { 824, 1.90549700e-06, 6.88110000e-07, 0.00000000e+00 },
    { 825, 1.77650900e-06, 6.41530000e-07, 0.00000000e+00 },
    { 826, 1.65621500e-06, 5.98090000e-07, 0.00000000e+00 },
    { 827, 1.54402200e-06, 5.57575000e-07, 0.00000000e+00 },
    { 828, 1.43944000e-06, 5.19808000e-07, 0.00000000e+00 },
    { 829, 1.34197700e-06, 4.84612000e-07, 0.00000000e+00 },
    { 830, 1.25114100e-06, 4.51810000e-07, 0.00000000e+00 }
};

}  // anonymous namespace

RGBSpectrum::RGBSpectrum()
    : r_{ 0.0 }
    , g_{ 0.0 }
    , b_{ 0.0 } {
}

RGBSpectrum::RGBSpectrum(double l)
    : r_{ l }
    , g_{ l }
    , b_{ l } {
}

RGBSpectrum::RGBSpectrum(double red, double green, double blue)
    : r_{ red }
    , g_{ green }
    , b_{ blue } {
}

RGBSpectrum::RGBSpectrum(const std::vector<double>& nm,
                         const std::vector<double>& values)
    : r_{ 0.0 }
    , g_{ 0.0 }
    , b_{ 0.0 } {
    const int n = static_cast<int>(nm.size());

    // Sort wave lengths and spectrum values.
    std::vector<std::pair<double, double>> temp;
    for (int i = 0; i < n; i++) {
        temp.emplace_back(nm[i], values[i]);
    }
    std::sort(temp.begin(), temp.end());

    double x = 0.0;
    double y = 0.0;
    double z = 0.0;
    for (int i = 0; i < nCIESamples; i++) {
        double factor = 0.0;
        if (CIEXYZ_full[i].nm <= nm[0]    ) factor = values[0];
        if (CIEXYZ_full[i].nm >= nm[n - 1]) factor = values[n - 1];
        int offset = std::upper_bound(nm.begin(), nm.end(), CIEXYZ_full[i].nm) - nm.begin();
        offset = ::clamp(offset, 0, (int)nm.size() - 2);
        double t = (CIEXYZ_full[i].nm - nm[offset]) / (nm[offset + 1] - nm[offset]);
        factor = (1.0 - t) * values[offset] + t * values[offset + 1];

        x += CIEXYZ_full[i].x * factor;
        y += CIEXYZ_full[i].y * factor;
        z += CIEXYZ_full[i].z * factor;
    }

    const double scale = (nCIESamples - 1) / (CIE_Y_integral * nCIESamples);
    x *= scale;
    y *= scale;
    z *= scale;

    *this = fromXYZ(x, y, z);
}

RGBSpectrum::RGBSpectrum(const RGBSpectrum& color)
    : r_{ color.r_ }
    , g_{ color.g_ }
    , b_{ color.b_ } {
}

RGBSpectrum::~RGBSpectrum() {
}

RGBSpectrum& RGBSpectrum::operator=(const RGBSpectrum& color) {
    this->r_ = color.r_;
    this->g_ = color.g_;
    this->b_ = color.b_;
    return *this;
}

RGBSpectrum& RGBSpectrum::operator+=(double x) {
    this->r_ += x;
    this->g_ += x;
    this->b_ += x;
    return *this;
}

RGBSpectrum& RGBSpectrum::operator+=(const RGBSpectrum& c) {
    this->r_ += c.r_;
    this->g_ += c.g_;
    this->b_ += c.b_;
    return *this;
}

RGBSpectrum& RGBSpectrum::operator-=(const RGBSpectrum& c) {
    this->r_ -= c.r_;
    this->g_ -= c.g_;
    this->b_ -= c.b_;
    return *this;
}

RGBSpectrum& RGBSpectrum::operator-=(double x) {
    this->r_ -= x;
    this->g_ -= x;
    this->b_ -= x;
    return *this;
}

RGBSpectrum& RGBSpectrum::operator*=(const RGBSpectrum& c) {
    this->r_ *= c.r_;
    this->g_ *= c.g_;
    this->b_ *= c.b_;
    return *this;
}

RGBSpectrum& RGBSpectrum::operator*=(double s) {
    this->r_ *= s;
    this->g_ *= s;
    this->b_ *= s;
    return *this;
}

RGBSpectrum& RGBSpectrum::operator/=(const RGBSpectrum& c) {
    Assertion(c.r_ != 0.0 && c.g_ != 0.0 && c.b_ != 0.0,
                "Zero division!!");
    this->r_ /= c.r_;
    this->g_ /= c.g_;
    this->b_ /= c.b_;
    return *this;
}

RGBSpectrum& RGBSpectrum::operator/=(double s) {
    Assertion(s != 0.0, "Zero division !!");
    this->r_ /= s;
    this->g_ /= s;
    this->b_ /= s;
    return *this;
}

RGBSpectrum RGBSpectrum::operator-() const {
    return RGBSpectrum(-this->r_, -this->g_, -this->b_);
}

RGBSpectrum RGBSpectrum::fromXYZ(double x, double y, double z) {
    const double r =  3.2406255 * x - 1.5372080 * y - 0.4986286 * z;
    const double g = -0.9689307 * x + 1.8757561 * y + 0.0415175 * z;
    const double b =  0.0557101 * x - 0.2040211 * y + 1.0569959 * z;
    return RGBSpectrum{ r, g, b };
}

bool RGBSpectrum::isBlack() const {
    return r_ == 0.0 && g_ == 0.0 && b_ == 0.0;
}

double RGBSpectrum::dot(const RGBSpectrum& color) const {
    return r_ * color.r_ + g_ * color.g_ + b_ * color.b_;
}

double RGBSpectrum::norm() const {
    return ::sqrt(this->squaredNorm());
}

double RGBSpectrum::squaredNorm() const {
    return this->dot(*this);
}

double RGBSpectrum::luminance() const {
    return 0.2126 * r_ + 0.7152 * g_ + 0.0722 * b_;
}
    
RGBSpectrum RGBSpectrum::sqrt(const RGBSpectrum& c) {
    using ::sqrt;
    Assertion(c.r_ >= 0.0 && c.g_ >= 0.0 && c.b_ >= 0.0,
              "Specified vector has negative entries !!");
    return RGBSpectrum(sqrt(c.r_), sqrt(c.g_), sqrt(c.b_));
}

RGBSpectrum RGBSpectrum::exp(const RGBSpectrum& c) {
    using ::exp;
    return RGBSpectrum(exp(c.r_), exp(c.g_), exp(c.b_));
}

RGBSpectrum RGBSpectrum::log(const RGBSpectrum& c) {
    using ::log;
    return RGBSpectrum(log(c.r_), log(c.g_), log(c.b_));
}

RGBSpectrum RGBSpectrum::maximum(const RGBSpectrum& c1, const RGBSpectrum& c2) {
    const double r = std::max(c1.r_, c2.r_);
    const double g = std::max(c1.g_, c2.g_);
    const double b = std::max(c1.b_, c2.b_);
    return RGBSpectrum(r, g, b);
}

RGBSpectrum RGBSpectrum::minimum(const RGBSpectrum& c1, const RGBSpectrum& c2) {
    const double r = std::min(c1.r_, c2.r_);
    const double g = std::min(c1.g_, c2.g_);
    const double b = std::min(c1.b_, c2.b_);
    return RGBSpectrum(r, g, b);
}

RGBSpectrum RGBSpectrum::clamp(const RGBSpectrum& c, const RGBSpectrum& lo, const RGBSpectrum& hi) {
    return RGBSpectrum::maximum(lo, RGBSpectrum::minimum(c, hi));
}

std::string RGBSpectrum::toString() const {
    std::stringstream ss;
    ss << std::fixed;
    ss << std::setprecision(8);
    ss << "(" << r_ << ", " << g_ << ", " << b_ << ")";
    return ss.str();
}

}  // namespace spica

spica::RGBSpectrum operator+(const spica::RGBSpectrum& c1, const spica::RGBSpectrum& c2) {
    spica::RGBSpectrum ret = c1;
    ret += c2;
    return ret;
}

spica::RGBSpectrum operator+(const spica::RGBSpectrum& c, double x) {
    spica::RGBSpectrum ret = c;
    ret += x;
    return ret;
}

spica::RGBSpectrum operator+(double x, const spica::RGBSpectrum& c) {
    spica::RGBSpectrum ret = c;
    ret += x;
    return ret;    
}

spica::RGBSpectrum operator-(const spica::RGBSpectrum& c1, const spica::RGBSpectrum& c2) {
    spica::RGBSpectrum ret = c1;
    ret -= c2;
    return ret;
}

spica::RGBSpectrum operator-(const spica::RGBSpectrum& c, double x) {
    spica::RGBSpectrum ret = c;
    ret -= x;
    return ret;
}

spica::RGBSpectrum operator-(double x, const spica::RGBSpectrum& c) {
    const double r = x - c.red();
    const double g = x - c.green();
    const double b = x - c.blue();
    return spica::RGBSpectrum(r, g, b);
}

spica::RGBSpectrum operator*(const spica::RGBSpectrum& c1, const spica::RGBSpectrum& c2) {
    spica::RGBSpectrum ret = c1;
    ret *= c2;
    return ret;
}

spica::RGBSpectrum operator*(const spica::RGBSpectrum& c, double s) {
    spica::RGBSpectrum ret = c;
    ret *= s;
    return ret;
}

spica::RGBSpectrum operator*(double s, const spica::RGBSpectrum& c) {
    spica::RGBSpectrum ret = c;
    ret *= s;
    return ret;
}

spica::RGBSpectrum operator/(const spica::RGBSpectrum& c1, const spica::RGBSpectrum& c2) {
    spica::RGBSpectrum ret = c1;
    ret /= c2;
    return ret;
}

spica::RGBSpectrum operator/(const spica::RGBSpectrum& c, double s) {
    spica::RGBSpectrum ret = c;
    ret /= s;
    return ret;
}

std::ostream& operator<<(std::ostream& os, const spica::RGBSpectrum& c) {
    os << c.toString();
    return os;
}
